package application;
	
import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.*;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import java.io.IOException;
import java.util.ArrayList;

import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.BrowserVersion;
import com.gargoylesoftware.htmlunit.Page;
import com.gargoylesoftware.htmlunit.ScriptResult;
import com.gargoylesoftware.htmlunit.html.*;
import java.util.*;

public class Main extends Application {
    private final ObservableList<Product> products
            = FXCollections.observableArrayList();
    @Override
    public void start(Stage stage) throws IOException {

        final Button addButton = new Button("Add");
        addButton.setOnAction(new EventHandler<ActionEvent>() {
            @Override public void handle(ActionEvent e) {
                products.add(new Product("new"));
            }
        });

        final VBox vbox = new VBox();
        vbox.getChildren().addAll(createList(300, 600),addButton);

        Scene scene = new Scene(new Group(), 400, 600);
        ((Group) scene.getRoot()).getChildren().addAll(vbox);
        stage.setScene(scene);
        stage.show();



        
     

        java.util.logging.Logger.getLogger("com.gargoylesoftware").setLevel(java.util.logging.Level.OFF);

        //SETUP WEBCLIENT
        WebClient webClient = new WebClient(BrowserVersion.BEST_SUPPORTED);
        webClient.getOptions().setCssEnabled(false);
           webClient.getOptions().setJavaScriptEnabled(true);
           webClient.getOptions().setThrowExceptionOnScriptError(false);
           webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);
           webClient.getOptions().setTimeout(10000);
           webClient.getOptions().setUseInsecureSSL(true);
        //CATCH LINKS TO PRODUCTS
           final HtmlPage page = webClient.getPage("http://www.edeka.de/unsere-marken/suche-nach-edeka-produkten/suche-nach-edeka-produkten/sortimentkategorien.jsp");
           ArrayList<DomAttr> links = new ArrayList<DomAttr>();
           HtmlAnchor getAllProducts_Button = page.getFirstByXPath(edeka_XPATH_CONS.SHOWALLPRODSBUTTON.toString());
           System.out.println(getAllProducts_Button.asXml());
           try {
        	   HtmlPage sub = getAllProducts_Button.click();
        	   webClient.waitForBackgroundJavaScript(700);
        	   DomText numProducts = sub.getFirstByXPath(edeka_XPATH_CONS.NUMPRODUCTS.toString());
        	   System.out.println(numProducts);
        	   HtmlAnchor nextButton = sub.getFirstByXPath(edeka_XPATH_CONS.NEXTBUTTON.toString());
        	   String[] split = nextButton.getAttribute("style").split(":");
       
        	   while(!split[1].contentEquals("hidden")) {
        		   log("fetch product cycle");
        		   links.addAll(sub.getByXPath("//a[@class='title']/@href"));
        		   sub = nextButton.click();
        		   webClient.waitForBackgroundJavaScript(1000);
        		   nextButton = sub.getFirstByXPath(edeka_XPATH_CONS.NEXTBUTTON.toString());
        		   split = nextButton.getAttribute("style").split(" ");
        		   split[1] = split[1].replace(" ", "").replace(";", "");
        		   System.out.println(links.size());
        		   break;
        	   }
        	   System.out.println(links);
        	   
        	   //FETCH PRODUCTS (O(n)) + fetch time 
        	   HtmlPage productPage;
        	   ArrayList<Product> products = new ArrayList<Product>();
        	   for(DomAttr link : links) {
        		   String temp_link = link.getValue();
        		   productPage = webClient.getPage("http://www.edeka.de"+temp_link);
        		   DomText name = productPage.getFirstByXPath("//span/span[@itemprop='name']/text()");
        		   if(name == null) {
        			  //
        		   }
        		   String label = productPage.getFirstByXPath("//span/span[@itemprop='brand']/text()").toString();
        		   String amount = productPage.getFirstByXPath("//p/b/text()").toString();
        		   System.out.println(name);
        		   log(label);
        		   log(amount);
        		   products.add(new Product("", label, amount));
        	   }
               
           } catch(IOException e) {
        	   System.out.print("EXCEPTION: " + e);
           }
            

    }

    public static void main(String[] args) {
        launch();
    }


    private GridPane createList(int minWith, int minHeight) {
        GridPane grid = new GridPane();
        grid.setPadding(new Insets(10, 10, 10, 10));
        grid.minWidth(minWith);
        grid.minHeight(minHeight);

        TableView table = new TableView();
        table.setEditable(true);

        TableColumn productCol = new TableColumn("Einkaufsliste");
        productCol.setCellValueFactory(new PropertyValueFactory<Product,String>("name"));

        table.getColumns().addAll(productCol);
        productCol.setMinWidth(minWith);
        table.setItems(products);
        GridPane.setConstraints(table, 0,0);

        grid.getChildren().addAll(table);

        return grid;

    }
    

    private static void log(String msg, String... vals) {
        System.out.println(String.format(msg, vals));
    }
}
