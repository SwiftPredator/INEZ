package application;

import java.io.IOException;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.file.FileSystems;

import com.gargoylesoftware.htmlunit.BrowserVersion;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.*;

import com.google.gson.Gson;
import com.google.gson.stream.JsonReader;

public class Brain implements BrainAPI {
	WebClient webClient;
	ArrayList<Product> edeka_products;
	private static Gson gson = new Gson();
	
	@Override
	public void startBrain() {
		setUpWebClient();
		try {
		ArrayList<DomAttr> linkList = this.getLinks();
		edeka_products = this.scratchProductInfo(linkList);
		log(FileSystems.getDefault().getPath(".").toAbsolutePath().toString()+"/products.txt");
		System.out.println(edeka_products);
		String s = gson.toJson(edeka_products);
		this.saveProducts(s, FileSystems.getDefault().getPath(".").toAbsolutePath().toString()+"/products.txt");
		} catch (Exception e) {
			System.out.println("BrainError: "+e);
		}
	}
	
	@Override
	public Product[] calculateSuggestions(String input) {
		// TODO Auto-generated method stub
		return null;
	}
	
    @Override
    public Product[] fetchShoppingList() {
    	return null;
    }
    
    private void setUpWebClient() {
    	//SETUP WEBCLIENT
        webClient = new WebClient(BrowserVersion.BEST_SUPPORTED);
        webClient.getOptions().setCssEnabled(false);
        webClient.getOptions().setJavaScriptEnabled(true);
        webClient.getOptions().setThrowExceptionOnScriptError(false);
        webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);
        webClient.getOptions().setTimeout(10000);
        webClient.getOptions().setUseInsecureSSL(true);
    }
	
	private ArrayList<DomAttr> getLinks() throws IOException {
		//CATCH LINKS TO PRODUCTS
        final HtmlPage page = webClient.getPage("http://www.edeka.de/unsere-marken/suche-nach-edeka-produkten/suche-nach-edeka-produkten/sortimentkategorien.jsp");
        ArrayList<DomAttr> links = new ArrayList<DomAttr>();
        HtmlAnchor getAllProducts_Button = page.getFirstByXPath(edeka_XPATH_CONS.SHOWALLPRODSBUTTON.toString());
        System.out.println(getAllProducts_Button.asXml());
        try {
     	   HtmlPage sub = getAllProducts_Button.click();
     	   webClient.waitForBackgroundJavaScript(1000);
     	   DomText numProducts = sub.getFirstByXPath(edeka_XPATH_CONS.NUMPRODUCTS.toString());
     	   System.out.println(numProducts);
     	   HtmlAnchor nextButton = sub.getFirstByXPath(edeka_XPATH_CONS.NEXTBUTTON.toString());
     	   String[] split = nextButton.getAttribute("style").split(":");
    
     	   while(!split[1].contentEquals("hidden")) {
     		   log("fetch product cycle");
     		   links.addAll(sub.getByXPath("//a[@class='title']/@href"));
     		   sub = nextButton.click();
     		   webClient.waitForBackgroundJavaScript(1000);
     		   nextButton = sub.getFirstByXPath(edeka_XPATH_CONS.NEXTBUTTON.toString());
     		   split = nextButton.getAttribute("style").split(" ");
     		   split[1] = split[1].replace(" ", "").replace(";", "");
     		   System.out.println(links.size());
     		   break;
     	   }
     	   System.out.println(links);
     	   return links;
        } catch(IOException e) {
     	   throw e;
        }
        	
        
	}
	
	private ArrayList<Product> scratchProductInfo(ArrayList<DomAttr> links) throws Exception {
		//FETCH PRODUCTS (O(n)) + fetch time 
 	   HtmlPage productPage;
 	   ArrayList<Product> products = new ArrayList<Product>();
 	   try {
	 	   for(DomAttr link : links) {
	 		   String temp_link = link.getValue();
	 		   productPage = webClient.getPage("http://www.edeka.de"+temp_link);
	 		   DomText name = productPage.getFirstByXPath("//span/span[@itemprop='name']/text()");
	 		   String stName = "";
	 		   if(name != null) {
	 			  stName = name.toString();
	 		   }
	 		   String label = productPage.getFirstByXPath("//span/span[@itemprop='brand']/text()").toString();
	 		   String amount = productPage.getFirstByXPath("//p/b/text()").toString();
	 		   System.out.println(name);
	 		   log(label);
	 		   log(amount);
	 		   products.add(new Product(stName, label, amount));
	 	   }
	 	   return products;
 	   } catch(Exception e) {
 		   throw e;
 	   }
	}
	
	private void saveProducts(String data, String sFileLoc) throws Exception {
		File file = new File(sFileLoc);
		if (!file.exists()) {
			try {
				File directory = new File(file.getParent());
				if (!directory.exists()) {
					directory.mkdirs();
				}
				file.createNewFile();
			} catch (IOException e) {
				log("Excepton Occured: " + e.toString());
			}
		}
 
		try {
			// Convenience class for writing character files
			FileWriter crunchifyWriter;
			crunchifyWriter = new FileWriter(file.getAbsoluteFile(), true);
 
			// Writes text to a character-output stream
			BufferedWriter bufferWriter = new BufferedWriter(crunchifyWriter);
			bufferWriter.write(data.toString());
			bufferWriter.close();
 
			log("Company data saved at file location: " + sFileLoc + " Data: " + data + "\n");
		} catch (IOException e) {
			throw e;
		}
	}

	private static void log(String msg, String... vals) {
        System.out.println(String.format(msg, vals));
    }
	
	

}
